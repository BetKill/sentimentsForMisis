import streamlit as st
import torch
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import matplotlib.pyplot as plt


# –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∞—Å—Å–æ–≤ torch (–≤–∞–∂–Ω–æ –¥–ª—è DirectML –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–µ–¥)
_ = torch.classes

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model_id = "BetKill1994/diploms"
try:
    tokenizer = AutoTokenizer.from_pretrained(model_id)
    model = AutoModelForSequenceClassification.from_pretrained(model_id)
    model.eval()
    st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")


# –ú–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤ (–≤–∞–∂–Ω–æ —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –æ–±—É—á–µ–Ω–∏—é)
labels = ["–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π", "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π", "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π"]

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞")
text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", "", height=150)

if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å") and text.strip():
    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º..."):
        try:
            inputs = tokenizer(
                text,
                return_tensors="pt",
                truncation=True,
                max_length=512,
                padding=True
            )

            with torch.no_grad():
                output = model(**inputs)
                logits = output.logits
                probs = torch.nn.functional.softmax(logits, dim=-1).squeeze().tolist()

            predicted = labels[torch.argmax(logits)]

            st.success(f"**–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** {predicted}")

            fig, ax = plt.subplots()
            ax.bar(labels, probs, color=["gray", "green", "red"])
            ax.set_ylabel("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
            ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º")
            st.pyplot(fig)

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
